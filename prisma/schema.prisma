generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./../src/graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("REACT_APP_DATABASE_URL")
}

model Book {
  bookid        String       @id @default(uuid())
  author        User         @relation("user_books", fields: [authorid], references: [uid])
  authorid      String
  cover         String?      @db.VarChar(255)
  created_at    DateTime?    @default(now()) @db.Timestamptz(0)
  updated_at    DateTime?    @default(now()) @db.Timestamptz(0)
  title         String       @db.VarChar(255)
  description   String       @db.Text
  book_comments Comment[]    @relation("book_comments")
  book_ratings  BookRating[] @relation("book_ratings")
}

model BookRating {
  bookratingid String    @id @default(uuid())
  author       User      @relation("user_ratings", fields: [authorid], references: [uid])
  authorid     String
  book         Book      @relation("book_ratings", fields: [bookid], references: [bookid])
  bookid       String
  created_at   DateTime? @default(now()) @db.Timestamptz(0)
  updated_at   DateTime? @default(now()) @db.Timestamptz(0)
}

model Comment {
  commentid  String    @id @default(uuid())
  author     User      @relation("user_comments", fields: [authorid], references: [uid])
  authorid   String
  created_at DateTime? @default(now()) @db.Timestamptz(0)
  updated_at DateTime? @default(now()) @db.Timestamptz(0)
  content    String    @db.Text
  // commentingid String?
  // commenton    Comment?    @relation("CommentThread", fields: [commentingid], references: [commentid])
  // comments     Comment[]   @relation("CommentThread")
  book       Book      @relation("book_comments", fields: [bookid], references: [bookid])
  bookid     String
}

model Post {
  postid       String    @id @default(uuid())
  created_at   DateTime? @default(now()) @db.Timestamptz(0)
  updated_at   DateTime? @default(now()) @db.Timestamptz(0)
  title        String    @db.VarChar(255)
  subtitle     String?   @db.VarChar(255)
  header_image String?   @db.VarChar(255)
  content      String    @db.Text
  author       User      @relation("user_posts", fields: [authorId], references: [uid])
  authorId     String
  // post         Post?     @relation("ReplyThread", fields: [postid], references: [postid], map: "reply_to_post")
  // posts        Post[]    @relation("ReplyThread", map: "replies")
}

model User {
  //"uid": "T5byvnfjKrSuDwBkppcFIJMOl2I2",
  // "email": "elvis.walsh@ethereal.email",
  // "emailVerified": false,
  // "isAnonymous": false,

  uid           String       @id @unique(map: "user_uid_unique")
  email         String       @unique(map: "user_email_unique")
  emailVerified Boolean?     @default(false)
  isAnonymous   Boolean?     @default(true)
  displayName   String?
  photoURL      String?
  createdAt     DateTime?    @default(now()) @db.Timestamptz(0)
  lastLoginAt   DateTime?    @default(now()) @db.Timestamptz(0)
  posts         Post[]       @relation("user_posts")
  comments      Comment[]    @relation("user_comments")
  books         Book[]       @relation("user_books")
  ratings       BookRating[] @relation("user_ratings")
}
